/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ArrayType<T> = ArrayTypeImpl<T> extends (infer U)[]
  ? U[]
  : ArrayTypeImpl<T>;

export type ArrayTypeImpl<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S[], I[], U[]>
  : T[];

export type AuthAalLevel = "aal1" | "aal2" | "aal3";

export type AuthCodeChallengeMethod = "plain" | "s256";

export type AuthFactorStatus = "unverified" | "verified";

export type AuthFactorType = "phone" | "totp" | "webauthn";

export type AuthOneTimeTokenType = "confirmation_token" | "email_change_token_current" | "email_change_token_new" | "phone_change_token" | "reauthentication_token" | "recovery_token";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type PgsodiumKeyStatus = "default" | "expired" | "invalid" | "valid";

export type PgsodiumKeyType = "aead-det" | "aead-ietf" | "auth" | "generichash" | "hmacsha256" | "hmacsha512" | "kdf" | "secretbox" | "secretstream" | "shorthash" | "stream_xchacha20";

export type PostVisibility = "all" | "friends" | "only";

export type ProfileVisibility = "all" | "friends";

export type ReportReason = "dont-like" | "offensive" | "spam";

export type ReportType = "account" | "comment" | "post" | "thread";

export type ThreadRatingType = "decrement" | "increment";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface _RealtimeExtensions {
  id: string;
  inserted_at: Timestamp;
  settings: Json | null;
  tenant_external_id: string | null;
  type: string | null;
  updated_at: Timestamp;
}

export interface _RealtimeSchemaMigrations {
  inserted_at: Timestamp | null;
  version: Int8;
}

export interface _RealtimeTenants {
  external_id: string | null;
  id: string;
  inserted_at: Timestamp;
  jwt_jwks: Json | null;
  jwt_secret: string | null;
  max_bytes_per_second: Generated<number>;
  max_channels_per_client: Generated<number>;
  max_concurrent_users: Generated<number>;
  max_events_per_second: Generated<number>;
  max_joins_per_second: Generated<number>;
  name: string | null;
  notify_private_alpha: Generated<boolean | null>;
  postgres_cdc_default: Generated<string | null>;
  suspend: Generated<boolean | null>;
  updated_at: Timestamp;
}

export interface Admins {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  user_id: string;
}

export interface AuthAuditLogEntries {
  created_at: Timestamp | null;
  id: string;
  instance_id: string | null;
  ip_address: Generated<string>;
  payload: Json | null;
}

export interface AuthFlowState {
  auth_code: string;
  auth_code_issued_at: Timestamp | null;
  authentication_method: string;
  code_challenge: string;
  code_challenge_method: AuthCodeChallengeMethod;
  created_at: Timestamp | null;
  id: string;
  provider_access_token: string | null;
  provider_refresh_token: string | null;
  provider_type: string;
  updated_at: Timestamp | null;
  user_id: string | null;
}

export interface AuthIdentities {
  created_at: Timestamp | null;
  /**
   * Auth: Email is a generated column that references the optional email property in the identity_data
   */
  email: Generated<string | null>;
  id: Generated<string>;
  identity_data: Json;
  last_sign_in_at: Timestamp | null;
  provider: string;
  provider_id: string;
  updated_at: Timestamp | null;
  user_id: string;
}

export interface AuthInstances {
  created_at: Timestamp | null;
  id: string;
  raw_base_config: string | null;
  updated_at: Timestamp | null;
  uuid: string | null;
}

export interface AuthMfaAmrClaims {
  authentication_method: string;
  created_at: Timestamp;
  id: string;
  session_id: string;
  updated_at: Timestamp;
}

export interface AuthMfaChallenges {
  created_at: Timestamp;
  factor_id: string;
  id: string;
  ip_address: string;
  otp_code: string | null;
  verified_at: Timestamp | null;
}

export interface AuthMfaFactors {
  created_at: Timestamp;
  factor_type: AuthFactorType;
  friendly_name: string | null;
  id: string;
  last_challenged_at: Timestamp | null;
  phone: string | null;
  secret: string | null;
  status: AuthFactorStatus;
  updated_at: Timestamp;
  user_id: string;
}

export interface AuthOneTimeTokens {
  created_at: Generated<Timestamp>;
  id: string;
  relates_to: string;
  token_hash: string;
  token_type: AuthOneTimeTokenType;
  updated_at: Generated<Timestamp>;
  user_id: string;
}

export interface AuthRefreshTokens {
  created_at: Timestamp | null;
  id: Generated<Int8>;
  instance_id: string | null;
  parent: string | null;
  revoked: boolean | null;
  session_id: string | null;
  token: string | null;
  updated_at: Timestamp | null;
  user_id: string | null;
}

export interface AuthSamlProviders {
  attribute_mapping: Json | null;
  created_at: Timestamp | null;
  entity_id: string;
  id: string;
  metadata_url: string | null;
  metadata_xml: string;
  name_id_format: string | null;
  sso_provider_id: string;
  updated_at: Timestamp | null;
}

export interface AuthSamlRelayStates {
  created_at: Timestamp | null;
  flow_state_id: string | null;
  for_email: string | null;
  id: string;
  redirect_to: string | null;
  request_id: string;
  sso_provider_id: string;
  updated_at: Timestamp | null;
}

export interface AuthSchemaMigrations {
  version: string;
}

export interface AuthSessions {
  aal: AuthAalLevel | null;
  created_at: Timestamp | null;
  factor_id: string | null;
  id: string;
  ip: string | null;
  /**
   * Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.
   */
  not_after: Timestamp | null;
  refreshed_at: Timestamp | null;
  tag: string | null;
  updated_at: Timestamp | null;
  user_agent: string | null;
  user_id: string;
}

export interface AuthSsoDomains {
  created_at: Timestamp | null;
  domain: string;
  id: string;
  sso_provider_id: string;
  updated_at: Timestamp | null;
}

export interface AuthSsoProviders {
  created_at: Timestamp | null;
  id: string;
  /**
   * Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.
   */
  resource_id: string | null;
  updated_at: Timestamp | null;
}

export interface AuthUsers {
  aud: string | null;
  banned_until: Timestamp | null;
  confirmation_sent_at: Timestamp | null;
  confirmation_token: string | null;
  confirmed_at: Generated<Timestamp | null>;
  created_at: Timestamp | null;
  deleted_at: Timestamp | null;
  email: string | null;
  email_change: string | null;
  email_change_confirm_status: Generated<number | null>;
  email_change_sent_at: Timestamp | null;
  email_change_token_current: Generated<string | null>;
  email_change_token_new: string | null;
  email_confirmed_at: Timestamp | null;
  encrypted_password: string | null;
  id: string;
  instance_id: string | null;
  invited_at: Timestamp | null;
  is_anonymous: Generated<boolean>;
  /**
   * Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.
   */
  is_sso_user: Generated<boolean>;
  is_super_admin: boolean | null;
  last_sign_in_at: Timestamp | null;
  phone: Generated<string | null>;
  phone_change: Generated<string | null>;
  phone_change_sent_at: Timestamp | null;
  phone_change_token: Generated<string | null>;
  phone_confirmed_at: Timestamp | null;
  raw_app_meta_data: Json | null;
  raw_user_meta_data: Json | null;
  reauthentication_sent_at: Timestamp | null;
  reauthentication_token: Generated<string | null>;
  recovery_sent_at: Timestamp | null;
  recovery_token: string | null;
  role: string | null;
  updated_at: Timestamp | null;
}

export interface Category {
  available: Generated<boolean>;
  description: string | null;
  id: Generated<Int8>;
  title: string;
}

export interface CategoryThreads {
  category_id: Int8;
  thread_id: string;
}

export interface ConfigAdvertisement {
  created_at: Generated<Timestamp>;
  description: string;
  id: Generated<Int8>;
  link: string | null;
  owner: string;
  title: string;
}

export interface ConfigAlerts {
  created_at: Generated<Timestamp>;
  creator: string;
  description: string | null;
  id: Generated<Int8>;
  link: string | null;
  title: string;
}

export interface ConfigMinecraftFacts {
  fact: string | null;
  id: Generated<Int8>;
}

export interface ConfigMinecraftItems {
  description: string | null;
  id: Generated<Int8>;
  image: string;
  title: string;
}

export interface CronJob {
  active: Generated<boolean>;
  command: string;
  database: Generated<string>;
  jobid: Generated<Int8>;
  jobname: string | null;
  nodename: Generated<string>;
  nodeport: Generated<number>;
  schedule: string;
  username: Generated<string>;
}

export interface CronJobRunDetails {
  command: string | null;
  database: string | null;
  end_time: Timestamp | null;
  job_pid: number | null;
  jobid: Int8 | null;
  return_message: string | null;
  runid: Generated<Int8>;
  start_time: Timestamp | null;
  status: string | null;
  username: string | null;
}

export interface ExtensionsPgStatStatements {
  blk_read_time: number | null;
  blk_write_time: number | null;
  calls: Int8 | null;
  dbid: number | null;
  jit_emission_count: Int8 | null;
  jit_emission_time: number | null;
  jit_functions: Int8 | null;
  jit_generation_time: number | null;
  jit_inlining_count: Int8 | null;
  jit_inlining_time: number | null;
  jit_optimization_count: Int8 | null;
  jit_optimization_time: number | null;
  local_blks_dirtied: Int8 | null;
  local_blks_hit: Int8 | null;
  local_blks_read: Int8 | null;
  local_blks_written: Int8 | null;
  max_exec_time: number | null;
  max_plan_time: number | null;
  mean_exec_time: number | null;
  mean_plan_time: number | null;
  min_exec_time: number | null;
  min_plan_time: number | null;
  plans: Int8 | null;
  query: string | null;
  queryid: Int8 | null;
  rows: Int8 | null;
  shared_blks_dirtied: Int8 | null;
  shared_blks_hit: Int8 | null;
  shared_blks_read: Int8 | null;
  shared_blks_written: Int8 | null;
  stddev_exec_time: number | null;
  stddev_plan_time: number | null;
  temp_blk_read_time: number | null;
  temp_blk_write_time: number | null;
  temp_blks_read: Int8 | null;
  temp_blks_written: Int8 | null;
  toplevel: boolean | null;
  total_exec_time: number | null;
  total_plan_time: number | null;
  userid: number | null;
  wal_bytes: Numeric | null;
  wal_fpi: Int8 | null;
  wal_records: Int8 | null;
}

export interface ExtensionsPgStatStatementsInfo {
  dealloc: Int8 | null;
  stats_reset: Timestamp | null;
}

export interface FriendsNotes {
  created_at: Generated<Timestamp>;
  friend_id: string;
  id: Generated<string>;
  initiator: string;
  note: string;
  recipient: string;
}

export interface FriendsPinned {
  created_at: Generated<Timestamp>;
  friend_id: string;
  id: Generated<string>;
  initiator: string;
  recipient: string;
}

export interface FriendsRequests {
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  initiator: string;
  recipient: string;
}

export interface InfoFindout {
  findout: string | null;
  id: Generated<Int8>;
  user_nickname: string;
}

export interface LandingCurrencies {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  imageUrl: string;
  isAvailable: Generated<boolean>;
  title: string;
  value: string;
}

export interface LandingDonate {
  commands: string[];
  created_at: Generated<Timestamp>;
  description: string;
  id: Generated<Int8>;
  imageUrl: string;
  origin: string;
  price: Int8;
  rating: Int8;
  title: string;
}

export interface LandingNews {
  created_at: Generated<Timestamp>;
  description: string;
  id: Generated<string>;
  images: string[] | null;
  media_links: Json | null;
  tags: string[] | null;
  title: string;
}

export interface LandingRuleContent {
  description: string | null;
  id: Generated<number>;
  punishment: string | null;
  rule_list_id: string | null;
  subtitle: string | null;
  title: string;
}

export interface LandingRulesList {
  id: string;
  name: string;
}

export interface LandingTerminContent {
  article_desc: string;
  article_title: string;
  id: Generated<number>;
  section_id: string | null;
}

export interface LandingTermins {
  section_id: string;
  subtitle: string | null;
  title: string;
}

export interface LuckpermsActions {
  acted_name: string;
  acted_uuid: string;
  action: string;
  actor_name: string;
  actor_uuid: string;
  id: Generated<number>;
  time: Int8;
  type: string;
}

export interface LuckpermsGroupPermissions {
  contexts: string;
  expiry: Int8;
  id: Generated<number>;
  name: string;
  permission: string;
  server: string;
  value: boolean;
  world: string;
}

export interface LuckpermsGroups {
  name: string;
}

export interface LuckpermsPlayers {
  primary_group: string;
  username: string;
  uuid: string;
}

export interface LuckpermsTracks {
  groups: string;
  name: string;
}

export interface LuckpermsUserPermissions {
  contexts: string;
  expiry: Int8;
  id: Generated<number>;
  permission: string;
  server: string;
  uuid: string;
  value: boolean;
  world: string;
}

export interface Moderators {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  user_id: string | null;
}

export interface NetHttpRequestQueue {
  body: Buffer | null;
  headers: Json;
  id: Generated<Int8>;
  method: string;
  timeout_milliseconds: number;
  url: string;
}

export interface NetHttpResponse {
  content: string | null;
  content_type: string | null;
  created: Generated<Timestamp>;
  error_msg: string | null;
  headers: Json | null;
  id: Int8 | null;
  status_code: number | null;
  timed_out: boolean | null;
}

export interface PgsodiumDecryptedKey {
  associated_data: string | null;
  comment: string | null;
  created: Timestamp | null;
  decrypted_raw_key: Buffer | null;
  expires: Timestamp | null;
  id: string | null;
  key_context: Buffer | null;
  key_id: Int8 | null;
  key_type: PgsodiumKeyType | null;
  name: string | null;
  parent_key: string | null;
  raw_key: Buffer | null;
  raw_key_nonce: Buffer | null;
  status: PgsodiumKeyStatus | null;
}

export interface PgsodiumKey {
  associated_data: Generated<string | null>;
  comment: string | null;
  created: Generated<Timestamp>;
  expires: Timestamp | null;
  id: Generated<string>;
  key_context: Generated<Buffer | null>;
  key_id: Generated<Int8 | null>;
  key_type: PgsodiumKeyType | null;
  name: string | null;
  parent_key: string | null;
  raw_key: Buffer | null;
  raw_key_nonce: Buffer | null;
  status: Generated<PgsodiumKeyStatus | null>;
  user_data: string | null;
}

export interface PgsodiumMaskColumns {
  associated_columns: string | null;
  attname: string | null;
  attrelid: number | null;
  format_type: string | null;
  key_id: string | null;
  key_id_column: string | null;
  nonce_column: string | null;
}

export interface PgsodiumMaskingRule {
  associated_columns: string | null;
  attname: string | null;
  attnum: number | null;
  attrelid: number | null;
  col_description: string | null;
  format_type: string | null;
  key_id: string | null;
  key_id_column: string | null;
  nonce_column: string | null;
  priority: number | null;
  relname: string | null;
  relnamespace: string | null;
  security_invoker: boolean | null;
  view_name: string | null;
}

export interface PgsodiumValidKey {
  associated_data: string | null;
  created: Timestamp | null;
  expires: Timestamp | null;
  id: string | null;
  key_context: Buffer | null;
  key_id: Int8 | null;
  key_type: PgsodiumKeyType | null;
  name: string | null;
  status: PgsodiumKeyStatus | null;
}

export interface Posts {
  content: string;
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  isComments: Generated<boolean>;
  isPinned: Generated<boolean>;
  isUpdated: Generated<boolean>;
  visibility: Generated<PostVisibility>;
}

export interface PostsComments {
  content: string;
  created_at: Generated<Timestamp>;
  id: Int8;
  post_id: string;
  user_nickname: string;
}

export interface PostsUsers {
  created_at: Generated<Timestamp>;
  post_id: string;
  user_nickname: string;
}

export interface PostsViews {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  post_id: string;
  user_id: string;
}

export interface PostsWithCommentsAndViewCounts {
  comments_count: Int8 | null;
  content: string | null;
  created_at: Timestamp | null;
  id: string | null;
  isComments: boolean | null;
  isPinned: boolean | null;
  isUpdated: boolean | null;
  user_nickname: string | null;
  views_count: Int8 | null;
  visibility: PostVisibility | null;
}

export interface ProfileViews {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  target_user_id: string | null;
  user_id: string | null;
}

export interface RealtimeMessages {
  extension: string;
  id: Generated<Int8>;
  inserted_at: Timestamp;
  topic: string;
  updated_at: Timestamp;
}

export interface RealtimeSchemaMigrations {
  inserted_at: Timestamp | null;
  version: Int8;
}

export interface RealtimeSubscription {
  claims: Json;
  claims_role: Generated<string>;
  created_at: Generated<Timestamp>;
  entity: string;
  filters: Generated<string[]>;
  id: Generated<Int8>;
  subscription_id: string;
}

export interface Reports {
  created_at: Generated<Timestamp>;
  description: string | null;
  id: Generated<Int8>;
  reason: Generated<ReportReason>;
  report_type: ReportType | null;
  reported_item: Json | null;
  target_user_nickname: string | null;
  user_nickname: string | null;
}

export interface Status {
  user_id: string;
  value: Generated<boolean>;
}

export interface StorageBuckets {
  allowed_mime_types: string[] | null;
  avif_autodetection: Generated<boolean | null>;
  created_at: Generated<Timestamp | null>;
  file_size_limit: Int8 | null;
  id: string;
  name: string;
  /**
   * Field is deprecated, use owner_id instead
   */
  owner: string | null;
  owner_id: string | null;
  public: Generated<boolean | null>;
  updated_at: Generated<Timestamp | null>;
}

export interface StorageMigrations {
  executed_at: Generated<Timestamp | null>;
  hash: string;
  id: number;
  name: string;
}

export interface StorageObjects {
  bucket_id: string | null;
  created_at: Generated<Timestamp | null>;
  id: Generated<string>;
  last_accessed_at: Generated<Timestamp | null>;
  metadata: Json | null;
  name: string | null;
  /**
   * Field is deprecated, use owner_id instead
   */
  owner: string | null;
  owner_id: string | null;
  path_tokens: Generated<string[] | null>;
  updated_at: Generated<Timestamp | null>;
  user_metadata: Json | null;
  version: string | null;
}

export interface StorageS3MultipartUploads {
  bucket_id: string;
  created_at: Generated<Timestamp>;
  id: string;
  in_progress_size: Generated<Int8>;
  key: string;
  owner_id: string | null;
  upload_signature: string;
  user_metadata: Json | null;
  version: string;
}

export interface StorageS3MultipartUploadsParts {
  bucket_id: string;
  created_at: Generated<Timestamp>;
  etag: string;
  id: Generated<string>;
  key: string;
  owner_id: string | null;
  part_number: number;
  size: Generated<Int8>;
  upload_id: string;
  version: string;
}

export interface SupabaseFunctionsHooks {
  created_at: Generated<Timestamp>;
  hook_name: string;
  hook_table_id: number;
  id: Generated<Int8>;
  request_id: Int8 | null;
}

export interface SupabaseFunctionsMigrations {
  inserted_at: Generated<Timestamp>;
  version: string;
}

export interface SupabaseMigrationsSchemaMigrations {
  name: string | null;
  statements: string[] | null;
  version: string;
}

export interface SupabaseMigrationsSeedFiles {
  hash: string;
  path: string;
}

export interface Threads {
  auto_remove: Generated<boolean>;
  content: Json;
  created_at: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  isComments: Generated<boolean>;
  isImages: Generated<boolean>;
  isUpdated: Generated<boolean>;
  permission: Generated<boolean>;
  title: string;
  updated_at: Timestamp | null;
  visibility: Generated<PostVisibility | null>;
}

export interface ThreadsComments {
  content: string;
  created_at: Generated<Timestamp>;
  edited: Generated<boolean>;
  id: Int8;
  thread_id: string;
  user_nickname: string;
}

export interface ThreadsCommentsReplies {
  created_at: Generated<Timestamp>;
  id: Int8;
  initiator_comment_id: Int8;
  recipient_comment_id: Int8;
}

export interface ThreadsImages {
  id: Generated<Int8>;
  images: string[];
  thread_id: string;
}

export interface ThreadsPinned {
  id: Generated<Int8>;
  thread_id: string;
}

export interface ThreadsRating {
  id: Generated<Int8>;
  thread_id: string;
  type: ThreadRatingType;
  user_id: string;
}

export interface ThreadsStars {
  id: Generated<Int8>;
  thread_id: string;
  user_id: string;
}

export interface ThreadsTags {
  id: Generated<Int8>;
  tags: ArrayType<Json>;
  thread_id: string;
}

export interface ThreadsUsers {
  created_at: Generated<Timestamp>;
  thread_id: string;
  user_nickname: string;
}

export interface ThreadsViews {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  thread_id: string;
  user_id: string;
}

export interface Users {
  acceptrules: Generated<boolean | null>;
  birthday: Timestamp | null;
  cover_image: string | null;
  created_at: Generated<Timestamp>;
  description: string | null;
  favorite_item: Int8 | null;
  id: Generated<string>;
  name_color: Generated<string>;
  nickname: string;
  preferences: Generated<Json | null>;
  real_name: string | null;
  status: string | null;
  uuid: string;
  visibility: Generated<ProfileVisibility>;
}

export interface UsersBanned {
  created_at: Generated<Timestamp | null>;
  id: Generated<Int8>;
  nickname: string;
  reason: string | null;
  time: Timestamp;
}

export interface UsersBlocked {
  created_at: Generated<Timestamp | null>;
  id: Generated<Int8>;
  initiator: string;
  recipient: string;
}

export interface UsersFriends {
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  user_1: string;
  user_2: string;
}

export interface UsersSavedThreads {
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  thread_id: string | null;
  user_id: string | null;
}

export interface UsersSecurity {
  email: string;
  token: string | null;
  user_nickname: string;
}

export interface UsersSession {
  browser: string | null;
  cpu: string | null;
  expires_at: Timestamp;
  id: Generated<Int8>;
  ip: string | null;
  isBot: boolean | null;
  os: string | null;
  session_id: string;
  ua: string | null;
  user_id: string;
}

export interface UsersSettings {
  id: Int8;
  user_id: string;
}

export interface VaultDecryptedSecrets {
  created_at: Timestamp | null;
  decrypted_secret: string | null;
  description: string | null;
  id: string | null;
  key_id: string | null;
  name: string | null;
  nonce: Buffer | null;
  secret: string | null;
  updated_at: Timestamp | null;
}

export interface VaultSecrets {
  created_at: Generated<Timestamp>;
  description: Generated<string>;
  id: Generated<string>;
  key_id: Generated<string | null>;
  name: string | null;
  nonce: Generated<Buffer | null>;
  secret: string;
  updated_at: Generated<Timestamp>;
}

export interface DB {
  "_realtime.extensions": _RealtimeExtensions;
  "_realtime.schema_migrations": _RealtimeSchemaMigrations;
  "_realtime.tenants": _RealtimeTenants;
  admins: Admins;
  "auth.audit_log_entries": AuthAuditLogEntries;
  "auth.flow_state": AuthFlowState;
  "auth.identities": AuthIdentities;
  "auth.instances": AuthInstances;
  "auth.mfa_amr_claims": AuthMfaAmrClaims;
  "auth.mfa_challenges": AuthMfaChallenges;
  "auth.mfa_factors": AuthMfaFactors;
  "auth.one_time_tokens": AuthOneTimeTokens;
  "auth.refresh_tokens": AuthRefreshTokens;
  "auth.saml_providers": AuthSamlProviders;
  "auth.saml_relay_states": AuthSamlRelayStates;
  "auth.schema_migrations": AuthSchemaMigrations;
  "auth.sessions": AuthSessions;
  "auth.sso_domains": AuthSsoDomains;
  "auth.sso_providers": AuthSsoProviders;
  "auth.users": AuthUsers;
  category: Category;
  category_threads: CategoryThreads;
  config_advertisement: ConfigAdvertisement;
  config_alerts: ConfigAlerts;
  config_minecraft_facts: ConfigMinecraftFacts;
  config_minecraft_items: ConfigMinecraftItems;
  "cron.job": CronJob;
  "cron.job_run_details": CronJobRunDetails;
  "extensions.pg_stat_statements": ExtensionsPgStatStatements;
  "extensions.pg_stat_statements_info": ExtensionsPgStatStatementsInfo;
  friends_notes: FriendsNotes;
  friends_pinned: FriendsPinned;
  friends_requests: FriendsRequests;
  info_findout: InfoFindout;
  landing_currencies: LandingCurrencies;
  landing_donate: LandingDonate;
  landing_news: LandingNews;
  landing_rule_content: LandingRuleContent;
  landing_rules_list: LandingRulesList;
  landing_termin_content: LandingTerminContent;
  landing_termins: LandingTermins;
  luckperms_actions: LuckpermsActions;
  luckperms_group_permissions: LuckpermsGroupPermissions;
  luckperms_groups: LuckpermsGroups;
  luckperms_players: LuckpermsPlayers;
  luckperms_tracks: LuckpermsTracks;
  luckperms_user_permissions: LuckpermsUserPermissions;
  moderators: Moderators;
  "net._http_response": NetHttpResponse;
  "net.http_request_queue": NetHttpRequestQueue;
  "pgsodium.decrypted_key": PgsodiumDecryptedKey;
  "pgsodium.key": PgsodiumKey;
  "pgsodium.mask_columns": PgsodiumMaskColumns;
  "pgsodium.masking_rule": PgsodiumMaskingRule;
  "pgsodium.valid_key": PgsodiumValidKey;
  posts: Posts;
  posts_comments: PostsComments;
  posts_users: PostsUsers;
  posts_views: PostsViews;
  posts_with_comments_and_view_counts: PostsWithCommentsAndViewCounts;
  profile_views: ProfileViews;
  "realtime.messages": RealtimeMessages;
  "realtime.schema_migrations": RealtimeSchemaMigrations;
  "realtime.subscription": RealtimeSubscription;
  reports: Reports;
  status: Status;
  "storage.buckets": StorageBuckets;
  "storage.migrations": StorageMigrations;
  "storage.objects": StorageObjects;
  "storage.s3_multipart_uploads": StorageS3MultipartUploads;
  "storage.s3_multipart_uploads_parts": StorageS3MultipartUploadsParts;
  "supabase_functions.hooks": SupabaseFunctionsHooks;
  "supabase_functions.migrations": SupabaseFunctionsMigrations;
  "supabase_migrations.schema_migrations": SupabaseMigrationsSchemaMigrations;
  "supabase_migrations.seed_files": SupabaseMigrationsSeedFiles;
  threads: Threads;
  threads_comments: ThreadsComments;
  threads_comments_replies: ThreadsCommentsReplies;
  threads_images: ThreadsImages;
  threads_pinned: ThreadsPinned;
  threads_rating: ThreadsRating;
  threads_stars: ThreadsStars;
  threads_tags: ThreadsTags;
  threads_users: ThreadsUsers;
  threads_views: ThreadsViews;
  users: Users;
  users_banned: UsersBanned;
  users_blocked: UsersBlocked;
  users_friends: UsersFriends;
  users_saved_threads: UsersSavedThreads;
  users_security: UsersSecurity;
  users_session: UsersSession;
  users_settings: UsersSettings;
  "vault.decrypted_secrets": VaultDecryptedSecrets;
  "vault.secrets": VaultSecrets;
}
