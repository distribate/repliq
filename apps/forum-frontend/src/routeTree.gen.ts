/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as ProtectedAdminIndexImport } from './routes/_protected/admin/index'
import { Route as ProtectedUserNicknameImport } from './routes/_protected/user/$nickname'
import { Route as ProtectedThreadIdImport } from './routes/_protected/thread/$id'
import { Route as ProtectedLandsIdImport } from './routes/_protected/lands/$id'
import { Route as ProtectedCategoryIdImport } from './routes/_protected/category/$id'
import { Route as ProtectedAdminSupportImport } from './routes/_protected/admin/support'
import { Route as ProtectedAdminStatsImport } from './routes/_protected/admin/stats'
import { Route as ProtectedAdminDashboardImport } from './routes/_protected/admin/dashboard'
import { Route as ProtectedAdminConfigsImport } from './routes/_protected/admin/configs'
import { Route as ProtectedactionsCreateIssueImport } from './routes/_protected/(actions)/create-issue'

// Create Virtual Routes

const PublicNotOnlineLazyImport = createFileRoute('/_public/not-online')()
const PublicNotExistLazyImport = createFileRoute('/_public/not-exist')()
const PublicBannedLazyImport = createFileRoute('/_public/banned')()
const ProtectedSearchLazyImport = createFileRoute('/_protected/search')()
const ProtectedNotificationsLazyImport = createFileRoute(
  '/_protected/notifications',
)()
const ProtectedFriendsLazyImport = createFileRoute('/_protected/friends')()
const ProtectedEventsLazyImport = createFileRoute('/_protected/events')()
const ProtectedCollectionLazyImport = createFileRoute(
  '/_protected/collection',
)()
const ProtectedRatingsIndexLazyImport = createFileRoute(
  '/_protected/ratings/',
)()
const ProtectedLandsIndexLazyImport = createFileRoute('/_protected/lands/')()
const ProtectedactionsCreateThreadLazyImport = createFileRoute(
  '/_protected/(actions)/create-thread',
)()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const PublicNotOnlineLazyRoute = PublicNotOnlineLazyImport.update({
  id: '/not-online',
  path: '/not-online',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/not-online.lazy').then((d) => d.Route),
)

const PublicNotExistLazyRoute = PublicNotExistLazyImport.update({
  id: '/not-exist',
  path: '/not-exist',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/not-exist.lazy').then((d) => d.Route),
)

const PublicBannedLazyRoute = PublicBannedLazyImport.update({
  id: '/banned',
  path: '/banned',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/banned.lazy').then((d) => d.Route),
)

const ProtectedSearchLazyRoute = ProtectedSearchLazyImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/search.lazy').then((d) => d.Route),
)

const ProtectedNotificationsLazyRoute = ProtectedNotificationsLazyImport.update(
  {
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => ProtectedRoute,
  } as any,
).lazy(() =>
  import('./routes/_protected/notifications.lazy').then((d) => d.Route),
)

const ProtectedFriendsLazyRoute = ProtectedFriendsLazyImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/friends.lazy').then((d) => d.Route),
)

const ProtectedEventsLazyRoute = ProtectedEventsLazyImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/events.lazy').then((d) => d.Route),
)

const ProtectedCollectionLazyRoute = ProtectedCollectionLazyImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/collection.lazy').then((d) => d.Route),
)

const ProtectedRatingsIndexLazyRoute = ProtectedRatingsIndexLazyImport.update({
  id: '/ratings/',
  path: '/ratings/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/ratings/index.lazy').then((d) => d.Route),
)

const ProtectedLandsIndexLazyRoute = ProtectedLandsIndexLazyImport.update({
  id: '/lands/',
  path: '/lands/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/lands/index.lazy').then((d) => d.Route),
)

const ProtectedAdminIndexRoute = ProtectedAdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedactionsCreateThreadLazyRoute =
  ProtectedactionsCreateThreadLazyImport.update({
    id: '/(actions)/create-thread',
    path: '/create-thread',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/(actions)/create-thread.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedUserNicknameRoute = ProtectedUserNicknameImport.update({
  id: '/user/$nickname',
  path: '/user/$nickname',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedThreadIdRoute = ProtectedThreadIdImport.update({
  id: '/thread/$id',
  path: '/thread/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLandsIdRoute = ProtectedLandsIdImport.update({
  id: '/lands/$id',
  path: '/lands/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedCategoryIdRoute = ProtectedCategoryIdImport.update({
  id: '/category/$id',
  path: '/category/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminSupportRoute = ProtectedAdminSupportImport.update({
  id: '/admin/support',
  path: '/admin/support',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminStatsRoute = ProtectedAdminStatsImport.update({
  id: '/admin/stats',
  path: '/admin/stats',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminDashboardRoute = ProtectedAdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminConfigsRoute = ProtectedAdminConfigsImport.update({
  id: '/admin/configs',
  path: '/admin/configs',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedactionsCreateIssueRoute =
  ProtectedactionsCreateIssueImport.update({
    id: '/(actions)/create-issue',
    path: '/create-issue',
    getParentRoute: () => ProtectedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_protected/collection': {
      id: '/_protected/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof ProtectedCollectionLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/events': {
      id: '/_protected/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof ProtectedEventsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/friends': {
      id: '/_protected/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof ProtectedFriendsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/notifications': {
      id: '/_protected/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof ProtectedNotificationsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/search': {
      id: '/_protected/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof ProtectedSearchLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/banned': {
      id: '/_public/banned'
      path: '/banned'
      fullPath: '/banned'
      preLoaderRoute: typeof PublicBannedLazyImport
      parentRoute: typeof PublicImport
    }
    '/_public/not-exist': {
      id: '/_public/not-exist'
      path: '/not-exist'
      fullPath: '/not-exist'
      preLoaderRoute: typeof PublicNotExistLazyImport
      parentRoute: typeof PublicImport
    }
    '/_public/not-online': {
      id: '/_public/not-online'
      path: '/not-online'
      fullPath: '/not-online'
      preLoaderRoute: typeof PublicNotOnlineLazyImport
      parentRoute: typeof PublicImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/(actions)/create-issue': {
      id: '/_protected/(actions)/create-issue'
      path: '/create-issue'
      fullPath: '/create-issue'
      preLoaderRoute: typeof ProtectedactionsCreateIssueImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/admin/configs': {
      id: '/_protected/admin/configs'
      path: '/admin/configs'
      fullPath: '/admin/configs'
      preLoaderRoute: typeof ProtectedAdminConfigsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/admin/dashboard': {
      id: '/_protected/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof ProtectedAdminDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/admin/stats': {
      id: '/_protected/admin/stats'
      path: '/admin/stats'
      fullPath: '/admin/stats'
      preLoaderRoute: typeof ProtectedAdminStatsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/admin/support': {
      id: '/_protected/admin/support'
      path: '/admin/support'
      fullPath: '/admin/support'
      preLoaderRoute: typeof ProtectedAdminSupportImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/category/$id': {
      id: '/_protected/category/$id'
      path: '/category/$id'
      fullPath: '/category/$id'
      preLoaderRoute: typeof ProtectedCategoryIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/lands/$id': {
      id: '/_protected/lands/$id'
      path: '/lands/$id'
      fullPath: '/lands/$id'
      preLoaderRoute: typeof ProtectedLandsIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/thread/$id': {
      id: '/_protected/thread/$id'
      path: '/thread/$id'
      fullPath: '/thread/$id'
      preLoaderRoute: typeof ProtectedThreadIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/user/$nickname': {
      id: '/_protected/user/$nickname'
      path: '/user/$nickname'
      fullPath: '/user/$nickname'
      preLoaderRoute: typeof ProtectedUserNicknameImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/(actions)/create-thread': {
      id: '/_protected/(actions)/create-thread'
      path: '/create-thread'
      fullPath: '/create-thread'
      preLoaderRoute: typeof ProtectedactionsCreateThreadLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/admin/': {
      id: '/_protected/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/lands/': {
      id: '/_protected/lands/'
      path: '/lands'
      fullPath: '/lands'
      preLoaderRoute: typeof ProtectedLandsIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/ratings/': {
      id: '/_protected/ratings/'
      path: '/ratings'
      fullPath: '/ratings'
      preLoaderRoute: typeof ProtectedRatingsIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedCollectionLazyRoute: typeof ProtectedCollectionLazyRoute
  ProtectedEventsLazyRoute: typeof ProtectedEventsLazyRoute
  ProtectedFriendsLazyRoute: typeof ProtectedFriendsLazyRoute
  ProtectedNotificationsLazyRoute: typeof ProtectedNotificationsLazyRoute
  ProtectedSearchLazyRoute: typeof ProtectedSearchLazyRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedactionsCreateIssueRoute: typeof ProtectedactionsCreateIssueRoute
  ProtectedAdminConfigsRoute: typeof ProtectedAdminConfigsRoute
  ProtectedAdminDashboardRoute: typeof ProtectedAdminDashboardRoute
  ProtectedAdminStatsRoute: typeof ProtectedAdminStatsRoute
  ProtectedAdminSupportRoute: typeof ProtectedAdminSupportRoute
  ProtectedCategoryIdRoute: typeof ProtectedCategoryIdRoute
  ProtectedLandsIdRoute: typeof ProtectedLandsIdRoute
  ProtectedThreadIdRoute: typeof ProtectedThreadIdRoute
  ProtectedUserNicknameRoute: typeof ProtectedUserNicknameRoute
  ProtectedactionsCreateThreadLazyRoute: typeof ProtectedactionsCreateThreadLazyRoute
  ProtectedAdminIndexRoute: typeof ProtectedAdminIndexRoute
  ProtectedLandsIndexLazyRoute: typeof ProtectedLandsIndexLazyRoute
  ProtectedRatingsIndexLazyRoute: typeof ProtectedRatingsIndexLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedCollectionLazyRoute: ProtectedCollectionLazyRoute,
  ProtectedEventsLazyRoute: ProtectedEventsLazyRoute,
  ProtectedFriendsLazyRoute: ProtectedFriendsLazyRoute,
  ProtectedNotificationsLazyRoute: ProtectedNotificationsLazyRoute,
  ProtectedSearchLazyRoute: ProtectedSearchLazyRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedactionsCreateIssueRoute: ProtectedactionsCreateIssueRoute,
  ProtectedAdminConfigsRoute: ProtectedAdminConfigsRoute,
  ProtectedAdminDashboardRoute: ProtectedAdminDashboardRoute,
  ProtectedAdminStatsRoute: ProtectedAdminStatsRoute,
  ProtectedAdminSupportRoute: ProtectedAdminSupportRoute,
  ProtectedCategoryIdRoute: ProtectedCategoryIdRoute,
  ProtectedLandsIdRoute: ProtectedLandsIdRoute,
  ProtectedThreadIdRoute: ProtectedThreadIdRoute,
  ProtectedUserNicknameRoute: ProtectedUserNicknameRoute,
  ProtectedactionsCreateThreadLazyRoute: ProtectedactionsCreateThreadLazyRoute,
  ProtectedAdminIndexRoute: ProtectedAdminIndexRoute,
  ProtectedLandsIndexLazyRoute: ProtectedLandsIndexLazyRoute,
  ProtectedRatingsIndexLazyRoute: ProtectedRatingsIndexLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicBannedLazyRoute: typeof PublicBannedLazyRoute
  PublicNotExistLazyRoute: typeof PublicNotExistLazyRoute
  PublicNotOnlineLazyRoute: typeof PublicNotOnlineLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicBannedLazyRoute: PublicBannedLazyRoute,
  PublicNotExistLazyRoute: PublicNotExistLazyRoute,
  PublicNotOnlineLazyRoute: PublicNotOnlineLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/collection': typeof ProtectedCollectionLazyRoute
  '/events': typeof ProtectedEventsLazyRoute
  '/friends': typeof ProtectedFriendsLazyRoute
  '/notifications': typeof ProtectedNotificationsLazyRoute
  '/search': typeof ProtectedSearchLazyRoute
  '/banned': typeof PublicBannedLazyRoute
  '/not-exist': typeof PublicNotExistLazyRoute
  '/not-online': typeof PublicNotOnlineLazyRoute
  '/': typeof ProtectedIndexRoute
  '/auth': typeof AuthIndexRoute
  '/create-issue': typeof ProtectedactionsCreateIssueRoute
  '/admin/configs': typeof ProtectedAdminConfigsRoute
  '/admin/dashboard': typeof ProtectedAdminDashboardRoute
  '/admin/stats': typeof ProtectedAdminStatsRoute
  '/admin/support': typeof ProtectedAdminSupportRoute
  '/category/$id': typeof ProtectedCategoryIdRoute
  '/lands/$id': typeof ProtectedLandsIdRoute
  '/thread/$id': typeof ProtectedThreadIdRoute
  '/user/$nickname': typeof ProtectedUserNicknameRoute
  '/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/lands': typeof ProtectedLandsIndexLazyRoute
  '/ratings': typeof ProtectedRatingsIndexLazyRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/collection': typeof ProtectedCollectionLazyRoute
  '/events': typeof ProtectedEventsLazyRoute
  '/friends': typeof ProtectedFriendsLazyRoute
  '/notifications': typeof ProtectedNotificationsLazyRoute
  '/search': typeof ProtectedSearchLazyRoute
  '/banned': typeof PublicBannedLazyRoute
  '/not-exist': typeof PublicNotExistLazyRoute
  '/not-online': typeof PublicNotOnlineLazyRoute
  '/': typeof ProtectedIndexRoute
  '/auth': typeof AuthIndexRoute
  '/create-issue': typeof ProtectedactionsCreateIssueRoute
  '/admin/configs': typeof ProtectedAdminConfigsRoute
  '/admin/dashboard': typeof ProtectedAdminDashboardRoute
  '/admin/stats': typeof ProtectedAdminStatsRoute
  '/admin/support': typeof ProtectedAdminSupportRoute
  '/category/$id': typeof ProtectedCategoryIdRoute
  '/lands/$id': typeof ProtectedLandsIdRoute
  '/thread/$id': typeof ProtectedThreadIdRoute
  '/user/$nickname': typeof ProtectedUserNicknameRoute
  '/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/lands': typeof ProtectedLandsIndexLazyRoute
  '/ratings': typeof ProtectedRatingsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/collection': typeof ProtectedCollectionLazyRoute
  '/_protected/events': typeof ProtectedEventsLazyRoute
  '/_protected/friends': typeof ProtectedFriendsLazyRoute
  '/_protected/notifications': typeof ProtectedNotificationsLazyRoute
  '/_protected/search': typeof ProtectedSearchLazyRoute
  '/_public/banned': typeof PublicBannedLazyRoute
  '/_public/not-exist': typeof PublicNotExistLazyRoute
  '/_public/not-online': typeof PublicNotOnlineLazyRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/_protected/(actions)/create-issue': typeof ProtectedactionsCreateIssueRoute
  '/_protected/admin/configs': typeof ProtectedAdminConfigsRoute
  '/_protected/admin/dashboard': typeof ProtectedAdminDashboardRoute
  '/_protected/admin/stats': typeof ProtectedAdminStatsRoute
  '/_protected/admin/support': typeof ProtectedAdminSupportRoute
  '/_protected/category/$id': typeof ProtectedCategoryIdRoute
  '/_protected/lands/$id': typeof ProtectedLandsIdRoute
  '/_protected/thread/$id': typeof ProtectedThreadIdRoute
  '/_protected/user/$nickname': typeof ProtectedUserNicknameRoute
  '/_protected/(actions)/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/_protected/admin/': typeof ProtectedAdminIndexRoute
  '/_protected/lands/': typeof ProtectedLandsIndexLazyRoute
  '/_protected/ratings/': typeof ProtectedRatingsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/collection'
    | '/events'
    | '/friends'
    | '/notifications'
    | '/search'
    | '/banned'
    | '/not-exist'
    | '/not-online'
    | '/'
    | '/auth'
    | '/create-issue'
    | '/admin/configs'
    | '/admin/dashboard'
    | '/admin/stats'
    | '/admin/support'
    | '/category/$id'
    | '/lands/$id'
    | '/thread/$id'
    | '/user/$nickname'
    | '/create-thread'
    | '/admin'
    | '/lands'
    | '/ratings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/collection'
    | '/events'
    | '/friends'
    | '/notifications'
    | '/search'
    | '/banned'
    | '/not-exist'
    | '/not-online'
    | '/'
    | '/auth'
    | '/create-issue'
    | '/admin/configs'
    | '/admin/dashboard'
    | '/admin/stats'
    | '/admin/support'
    | '/category/$id'
    | '/lands/$id'
    | '/thread/$id'
    | '/user/$nickname'
    | '/create-thread'
    | '/admin'
    | '/lands'
    | '/ratings'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/collection'
    | '/_protected/events'
    | '/_protected/friends'
    | '/_protected/notifications'
    | '/_protected/search'
    | '/_public/banned'
    | '/_public/not-exist'
    | '/_public/not-online'
    | '/_protected/'
    | '/auth/'
    | '/_protected/(actions)/create-issue'
    | '/_protected/admin/configs'
    | '/_protected/admin/dashboard'
    | '/_protected/admin/stats'
    | '/_protected/admin/support'
    | '/_protected/category/$id'
    | '/_protected/lands/$id'
    | '/_protected/thread/$id'
    | '/_protected/user/$nickname'
    | '/_protected/(actions)/create-thread'
    | '/_protected/admin/'
    | '/_protected/lands/'
    | '/_protected/ratings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public",
        "/auth/"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/collection",
        "/_protected/events",
        "/_protected/friends",
        "/_protected/notifications",
        "/_protected/search",
        "/_protected/",
        "/_protected/(actions)/create-issue",
        "/_protected/admin/configs",
        "/_protected/admin/dashboard",
        "/_protected/admin/stats",
        "/_protected/admin/support",
        "/_protected/category/$id",
        "/_protected/lands/$id",
        "/_protected/thread/$id",
        "/_protected/user/$nickname",
        "/_protected/(actions)/create-thread",
        "/_protected/admin/",
        "/_protected/lands/",
        "/_protected/ratings/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/banned",
        "/_public/not-exist",
        "/_public/not-online"
      ]
    },
    "/_protected/collection": {
      "filePath": "_protected/collection.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/events": {
      "filePath": "_protected/events.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/friends": {
      "filePath": "_protected/friends.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/notifications": {
      "filePath": "_protected/notifications.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/search": {
      "filePath": "_protected/search.lazy.tsx",
      "parent": "/_protected"
    },
    "/_public/banned": {
      "filePath": "_public/banned.lazy.tsx",
      "parent": "/_public"
    },
    "/_public/not-exist": {
      "filePath": "_public/not-exist.lazy.tsx",
      "parent": "/_public"
    },
    "/_public/not-online": {
      "filePath": "_public/not-online.lazy.tsx",
      "parent": "/_public"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/_protected/(actions)/create-issue": {
      "filePath": "_protected/(actions)/create-issue.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/configs": {
      "filePath": "_protected/admin/configs.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/dashboard": {
      "filePath": "_protected/admin/dashboard.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/stats": {
      "filePath": "_protected/admin/stats.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/support": {
      "filePath": "_protected/admin/support.tsx",
      "parent": "/_protected"
    },
    "/_protected/category/$id": {
      "filePath": "_protected/category/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/lands/$id": {
      "filePath": "_protected/lands/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/thread/$id": {
      "filePath": "_protected/thread/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/user/$nickname": {
      "filePath": "_protected/user/$nickname.tsx",
      "parent": "/_protected"
    },
    "/_protected/(actions)/create-thread": {
      "filePath": "_protected/(actions)/create-thread.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/": {
      "filePath": "_protected/admin/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/lands/": {
      "filePath": "_protected/lands/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/ratings/": {
      "filePath": "_protected/ratings/index.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
