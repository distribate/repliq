/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ProtectedCollectionImport } from './routes/_protected/collection'
import { Route as ProtectedLandsIndexImport } from './routes/_protected/lands/index'
import { Route as ProtectedUserNicknameImport } from './routes/_protected/user/$nickname'
import { Route as ProtectedThreadIdImport } from './routes/_protected/thread/$id'
import { Route as ProtectedLandsIdImport } from './routes/_protected/lands/$id'
import { Route as ProtectedDashboardDashboardImport } from './routes/_protected/dashboard/_dashboard'
import { Route as ProtectedCategoryIdImport } from './routes/_protected/category/$id'
import { Route as ProtectedDashboardDashboardIndexImport } from './routes/_protected/dashboard/_dashboard/index'
import { Route as ProtectedDashboardDashboardThreadsImport } from './routes/_protected/dashboard/_dashboard/threads'
import { Route as ProtectedDashboardDashboardProfileImport } from './routes/_protected/dashboard/_dashboard/profile'

// Create Virtual Routes

const ProtectedDashboardImport = createFileRoute('/_protected/dashboard')()
const PublicNotOnlineLazyImport = createFileRoute('/_public/not-online')()
const PublicNotExistLazyImport = createFileRoute('/_public/not-exist')()
const PublicBannedLazyImport = createFileRoute('/_public/banned')()
const ProtectedSearchLazyImport = createFileRoute('/_protected/search')()
const ProtectedNotificationsLazyImport = createFileRoute(
  '/_protected/notifications',
)()
const ProtectedFriendsLazyImport = createFileRoute('/_protected/friends')()
const ProtectedEventsLazyImport = createFileRoute('/_protected/events')()
const ProtectedAdminLazyImport = createFileRoute('/_protected/_admin')()
const ProtectedRatingsIndexLazyImport = createFileRoute(
  '/_protected/ratings/',
)()
const ProtectedactionsCreateTicketLazyImport = createFileRoute(
  '/_protected/(actions)/create-ticket',
)()
const ProtectedactionsCreateThreadLazyImport = createFileRoute(
  '/_protected/(actions)/create-thread',
)()
const ProtectedAdminAdminIndexLazyImport = createFileRoute(
  '/_protected/_admin/admin/',
)()
const ProtectedAdminAdminSupportLazyImport = createFileRoute(
  '/_protected/_admin/admin/support',
)()
const ProtectedAdminAdminStatsLazyImport = createFileRoute(
  '/_protected/_admin/admin/stats',
)()
const ProtectedAdminAdminDashboardLazyImport = createFileRoute(
  '/_protected/_admin/admin/dashboard',
)()
const ProtectedAdminAdminConfigsLazyImport = createFileRoute(
  '/_protected/_admin/admin/configs',
)()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const PublicNotOnlineLazyRoute = PublicNotOnlineLazyImport.update({
  id: '/not-online',
  path: '/not-online',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/not-online.lazy').then((d) => d.Route),
)

const PublicNotExistLazyRoute = PublicNotExistLazyImport.update({
  id: '/not-exist',
  path: '/not-exist',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/not-exist.lazy').then((d) => d.Route),
)

const PublicBannedLazyRoute = PublicBannedLazyImport.update({
  id: '/banned',
  path: '/banned',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/banned.lazy').then((d) => d.Route),
)

const ProtectedSearchLazyRoute = ProtectedSearchLazyImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/search.lazy').then((d) => d.Route),
)

const ProtectedNotificationsLazyRoute = ProtectedNotificationsLazyImport.update(
  {
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => ProtectedRoute,
  } as any,
).lazy(() =>
  import('./routes/_protected/notifications.lazy').then((d) => d.Route),
)

const ProtectedFriendsLazyRoute = ProtectedFriendsLazyImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/friends.lazy').then((d) => d.Route),
)

const ProtectedEventsLazyRoute = ProtectedEventsLazyImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/events.lazy').then((d) => d.Route),
)

const ProtectedAdminLazyRoute = ProtectedAdminLazyImport.update({
  id: '/_admin',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/_admin.lazy').then((d) => d.Route),
)

const ProtectedCollectionRoute = ProtectedCollectionImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedRatingsIndexLazyRoute = ProtectedRatingsIndexLazyImport.update({
  id: '/ratings/',
  path: '/ratings/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/ratings/index.lazy').then((d) => d.Route),
)

const ProtectedLandsIndexRoute = ProtectedLandsIndexImport.update({
  id: '/lands/',
  path: '/lands/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedactionsCreateTicketLazyRoute =
  ProtectedactionsCreateTicketLazyImport.update({
    id: '/(actions)/create-ticket',
    path: '/create-ticket',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/(actions)/create-ticket.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedactionsCreateThreadLazyRoute =
  ProtectedactionsCreateThreadLazyImport.update({
    id: '/(actions)/create-thread',
    path: '/create-thread',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/(actions)/create-thread.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedUserNicknameRoute = ProtectedUserNicknameImport.update({
  id: '/user/$nickname',
  path: '/user/$nickname',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedThreadIdRoute = ProtectedThreadIdImport.update({
  id: '/thread/$id',
  path: '/thread/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLandsIdRoute = ProtectedLandsIdImport.update({
  id: '/lands/$id',
  path: '/lands/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedDashboardDashboardRoute =
  ProtectedDashboardDashboardImport.update({
    id: '/_dashboard',
    getParentRoute: () => ProtectedDashboardRoute,
  } as any)

const ProtectedCategoryIdRoute = ProtectedCategoryIdImport.update({
  id: '/category/$id',
  path: '/category/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminAdminIndexLazyRoute =
  ProtectedAdminAdminIndexLazyImport.update({
    id: '/admin/',
    path: '/admin/',
    getParentRoute: () => ProtectedAdminLazyRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_admin/admin/index.lazy').then((d) => d.Route),
  )

const ProtectedDashboardDashboardIndexRoute =
  ProtectedDashboardDashboardIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProtectedDashboardDashboardRoute,
  } as any)

const ProtectedAdminAdminSupportLazyRoute =
  ProtectedAdminAdminSupportLazyImport.update({
    id: '/admin/support',
    path: '/admin/support',
    getParentRoute: () => ProtectedAdminLazyRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_admin/admin/support.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedAdminAdminStatsLazyRoute =
  ProtectedAdminAdminStatsLazyImport.update({
    id: '/admin/stats',
    path: '/admin/stats',
    getParentRoute: () => ProtectedAdminLazyRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_admin/admin/stats.lazy').then((d) => d.Route),
  )

const ProtectedAdminAdminDashboardLazyRoute =
  ProtectedAdminAdminDashboardLazyImport.update({
    id: '/admin/dashboard',
    path: '/admin/dashboard',
    getParentRoute: () => ProtectedAdminLazyRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_admin/admin/dashboard.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedAdminAdminConfigsLazyRoute =
  ProtectedAdminAdminConfigsLazyImport.update({
    id: '/admin/configs',
    path: '/admin/configs',
    getParentRoute: () => ProtectedAdminLazyRoute,
  } as any).lazy(() =>
    import('./routes/_protected/_admin/admin/configs.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedDashboardDashboardThreadsRoute =
  ProtectedDashboardDashboardThreadsImport.update({
    id: '/threads',
    path: '/threads',
    getParentRoute: () => ProtectedDashboardDashboardRoute,
  } as any)

const ProtectedDashboardDashboardProfileRoute =
  ProtectedDashboardDashboardProfileImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => ProtectedDashboardDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_protected/collection': {
      id: '/_protected/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof ProtectedCollectionImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/_admin': {
      id: '/_protected/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedAdminLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/events': {
      id: '/_protected/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof ProtectedEventsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/friends': {
      id: '/_protected/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof ProtectedFriendsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/notifications': {
      id: '/_protected/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof ProtectedNotificationsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/search': {
      id: '/_protected/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof ProtectedSearchLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/banned': {
      id: '/_public/banned'
      path: '/banned'
      fullPath: '/banned'
      preLoaderRoute: typeof PublicBannedLazyImport
      parentRoute: typeof PublicImport
    }
    '/_public/not-exist': {
      id: '/_public/not-exist'
      path: '/not-exist'
      fullPath: '/not-exist'
      preLoaderRoute: typeof PublicNotExistLazyImport
      parentRoute: typeof PublicImport
    }
    '/_public/not-online': {
      id: '/_public/not-online'
      path: '/not-online'
      fullPath: '/not-online'
      preLoaderRoute: typeof PublicNotOnlineLazyImport
      parentRoute: typeof PublicImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/category/$id': {
      id: '/_protected/category/$id'
      path: '/category/$id'
      fullPath: '/category/$id'
      preLoaderRoute: typeof ProtectedCategoryIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard/_dashboard': {
      id: '/_protected/dashboard/_dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardDashboardImport
      parentRoute: typeof ProtectedDashboardRoute
    }
    '/_protected/lands/$id': {
      id: '/_protected/lands/$id'
      path: '/lands/$id'
      fullPath: '/lands/$id'
      preLoaderRoute: typeof ProtectedLandsIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/thread/$id': {
      id: '/_protected/thread/$id'
      path: '/thread/$id'
      fullPath: '/thread/$id'
      preLoaderRoute: typeof ProtectedThreadIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/user/$nickname': {
      id: '/_protected/user/$nickname'
      path: '/user/$nickname'
      fullPath: '/user/$nickname'
      preLoaderRoute: typeof ProtectedUserNicknameImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/(actions)/create-thread': {
      id: '/_protected/(actions)/create-thread'
      path: '/create-thread'
      fullPath: '/create-thread'
      preLoaderRoute: typeof ProtectedactionsCreateThreadLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/(actions)/create-ticket': {
      id: '/_protected/(actions)/create-ticket'
      path: '/create-ticket'
      fullPath: '/create-ticket'
      preLoaderRoute: typeof ProtectedactionsCreateTicketLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/lands/': {
      id: '/_protected/lands/'
      path: '/lands'
      fullPath: '/lands'
      preLoaderRoute: typeof ProtectedLandsIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/ratings/': {
      id: '/_protected/ratings/'
      path: '/ratings'
      fullPath: '/ratings'
      preLoaderRoute: typeof ProtectedRatingsIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard/_dashboard/profile': {
      id: '/_protected/dashboard/_dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof ProtectedDashboardDashboardProfileImport
      parentRoute: typeof ProtectedDashboardDashboardImport
    }
    '/_protected/dashboard/_dashboard/threads': {
      id: '/_protected/dashboard/_dashboard/threads'
      path: '/threads'
      fullPath: '/dashboard/threads'
      preLoaderRoute: typeof ProtectedDashboardDashboardThreadsImport
      parentRoute: typeof ProtectedDashboardDashboardImport
    }
    '/_protected/_admin/admin/configs': {
      id: '/_protected/_admin/admin/configs'
      path: '/admin/configs'
      fullPath: '/admin/configs'
      preLoaderRoute: typeof ProtectedAdminAdminConfigsLazyImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/_admin/admin/dashboard': {
      id: '/_protected/_admin/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof ProtectedAdminAdminDashboardLazyImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/_admin/admin/stats': {
      id: '/_protected/_admin/admin/stats'
      path: '/admin/stats'
      fullPath: '/admin/stats'
      preLoaderRoute: typeof ProtectedAdminAdminStatsLazyImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/_admin/admin/support': {
      id: '/_protected/_admin/admin/support'
      path: '/admin/support'
      fullPath: '/admin/support'
      preLoaderRoute: typeof ProtectedAdminAdminSupportLazyImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/dashboard/_dashboard/': {
      id: '/_protected/dashboard/_dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof ProtectedDashboardDashboardIndexImport
      parentRoute: typeof ProtectedDashboardDashboardImport
    }
    '/_protected/_admin/admin/': {
      id: '/_protected/_admin/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminAdminIndexLazyImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
  }
}

// Create and export the route tree

interface ProtectedAdminLazyRouteChildren {
  ProtectedAdminAdminConfigsLazyRoute: typeof ProtectedAdminAdminConfigsLazyRoute
  ProtectedAdminAdminDashboardLazyRoute: typeof ProtectedAdminAdminDashboardLazyRoute
  ProtectedAdminAdminStatsLazyRoute: typeof ProtectedAdminAdminStatsLazyRoute
  ProtectedAdminAdminSupportLazyRoute: typeof ProtectedAdminAdminSupportLazyRoute
  ProtectedAdminAdminIndexLazyRoute: typeof ProtectedAdminAdminIndexLazyRoute
}

const ProtectedAdminLazyRouteChildren: ProtectedAdminLazyRouteChildren = {
  ProtectedAdminAdminConfigsLazyRoute: ProtectedAdminAdminConfigsLazyRoute,
  ProtectedAdminAdminDashboardLazyRoute: ProtectedAdminAdminDashboardLazyRoute,
  ProtectedAdminAdminStatsLazyRoute: ProtectedAdminAdminStatsLazyRoute,
  ProtectedAdminAdminSupportLazyRoute: ProtectedAdminAdminSupportLazyRoute,
  ProtectedAdminAdminIndexLazyRoute: ProtectedAdminAdminIndexLazyRoute,
}

const ProtectedAdminLazyRouteWithChildren =
  ProtectedAdminLazyRoute._addFileChildren(ProtectedAdminLazyRouteChildren)

interface ProtectedDashboardDashboardRouteChildren {
  ProtectedDashboardDashboardProfileRoute: typeof ProtectedDashboardDashboardProfileRoute
  ProtectedDashboardDashboardThreadsRoute: typeof ProtectedDashboardDashboardThreadsRoute
  ProtectedDashboardDashboardIndexRoute: typeof ProtectedDashboardDashboardIndexRoute
}

const ProtectedDashboardDashboardRouteChildren: ProtectedDashboardDashboardRouteChildren =
  {
    ProtectedDashboardDashboardProfileRoute:
      ProtectedDashboardDashboardProfileRoute,
    ProtectedDashboardDashboardThreadsRoute:
      ProtectedDashboardDashboardThreadsRoute,
    ProtectedDashboardDashboardIndexRoute:
      ProtectedDashboardDashboardIndexRoute,
  }

const ProtectedDashboardDashboardRouteWithChildren =
  ProtectedDashboardDashboardRoute._addFileChildren(
    ProtectedDashboardDashboardRouteChildren,
  )

interface ProtectedDashboardRouteChildren {
  ProtectedDashboardDashboardRoute: typeof ProtectedDashboardDashboardRouteWithChildren
}

const ProtectedDashboardRouteChildren: ProtectedDashboardRouteChildren = {
  ProtectedDashboardDashboardRoute:
    ProtectedDashboardDashboardRouteWithChildren,
}

const ProtectedDashboardRouteWithChildren =
  ProtectedDashboardRoute._addFileChildren(ProtectedDashboardRouteChildren)

interface ProtectedRouteChildren {
  ProtectedCollectionRoute: typeof ProtectedCollectionRoute
  ProtectedAdminLazyRoute: typeof ProtectedAdminLazyRouteWithChildren
  ProtectedEventsLazyRoute: typeof ProtectedEventsLazyRoute
  ProtectedFriendsLazyRoute: typeof ProtectedFriendsLazyRoute
  ProtectedNotificationsLazyRoute: typeof ProtectedNotificationsLazyRoute
  ProtectedSearchLazyRoute: typeof ProtectedSearchLazyRoute
  ProtectedCategoryIdRoute: typeof ProtectedCategoryIdRoute
  ProtectedDashboardRoute: typeof ProtectedDashboardRouteWithChildren
  ProtectedLandsIdRoute: typeof ProtectedLandsIdRoute
  ProtectedThreadIdRoute: typeof ProtectedThreadIdRoute
  ProtectedUserNicknameRoute: typeof ProtectedUserNicknameRoute
  ProtectedactionsCreateThreadLazyRoute: typeof ProtectedactionsCreateThreadLazyRoute
  ProtectedactionsCreateTicketLazyRoute: typeof ProtectedactionsCreateTicketLazyRoute
  ProtectedLandsIndexRoute: typeof ProtectedLandsIndexRoute
  ProtectedRatingsIndexLazyRoute: typeof ProtectedRatingsIndexLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedCollectionRoute: ProtectedCollectionRoute,
  ProtectedAdminLazyRoute: ProtectedAdminLazyRouteWithChildren,
  ProtectedEventsLazyRoute: ProtectedEventsLazyRoute,
  ProtectedFriendsLazyRoute: ProtectedFriendsLazyRoute,
  ProtectedNotificationsLazyRoute: ProtectedNotificationsLazyRoute,
  ProtectedSearchLazyRoute: ProtectedSearchLazyRoute,
  ProtectedCategoryIdRoute: ProtectedCategoryIdRoute,
  ProtectedDashboardRoute: ProtectedDashboardRouteWithChildren,
  ProtectedLandsIdRoute: ProtectedLandsIdRoute,
  ProtectedThreadIdRoute: ProtectedThreadIdRoute,
  ProtectedUserNicknameRoute: ProtectedUserNicknameRoute,
  ProtectedactionsCreateThreadLazyRoute: ProtectedactionsCreateThreadLazyRoute,
  ProtectedactionsCreateTicketLazyRoute: ProtectedactionsCreateTicketLazyRoute,
  ProtectedLandsIndexRoute: ProtectedLandsIndexRoute,
  ProtectedRatingsIndexLazyRoute: ProtectedRatingsIndexLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicBannedLazyRoute: typeof PublicBannedLazyRoute
  PublicNotExistLazyRoute: typeof PublicNotExistLazyRoute
  PublicNotOnlineLazyRoute: typeof PublicNotOnlineLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicBannedLazyRoute: PublicBannedLazyRoute,
  PublicNotExistLazyRoute: PublicNotExistLazyRoute,
  PublicNotOnlineLazyRoute: PublicNotOnlineLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedAdminLazyRouteWithChildren
  '/collection': typeof ProtectedCollectionRoute
  '/events': typeof ProtectedEventsLazyRoute
  '/friends': typeof ProtectedFriendsLazyRoute
  '/notifications': typeof ProtectedNotificationsLazyRoute
  '/search': typeof ProtectedSearchLazyRoute
  '/banned': typeof PublicBannedLazyRoute
  '/not-exist': typeof PublicNotExistLazyRoute
  '/not-online': typeof PublicNotOnlineLazyRoute
  '/auth': typeof AuthIndexRoute
  '/category/$id': typeof ProtectedCategoryIdRoute
  '/dashboard': typeof ProtectedDashboardDashboardRouteWithChildren
  '/lands/$id': typeof ProtectedLandsIdRoute
  '/thread/$id': typeof ProtectedThreadIdRoute
  '/user/$nickname': typeof ProtectedUserNicknameRoute
  '/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/create-ticket': typeof ProtectedactionsCreateTicketLazyRoute
  '/lands': typeof ProtectedLandsIndexRoute
  '/ratings': typeof ProtectedRatingsIndexLazyRoute
  '/dashboard/profile': typeof ProtectedDashboardDashboardProfileRoute
  '/dashboard/threads': typeof ProtectedDashboardDashboardThreadsRoute
  '/admin/configs': typeof ProtectedAdminAdminConfigsLazyRoute
  '/admin/dashboard': typeof ProtectedAdminAdminDashboardLazyRoute
  '/admin/stats': typeof ProtectedAdminAdminStatsLazyRoute
  '/admin/support': typeof ProtectedAdminAdminSupportLazyRoute
  '/dashboard/': typeof ProtectedDashboardDashboardIndexRoute
  '/admin': typeof ProtectedAdminAdminIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedAdminLazyRouteWithChildren
  '/collection': typeof ProtectedCollectionRoute
  '/events': typeof ProtectedEventsLazyRoute
  '/friends': typeof ProtectedFriendsLazyRoute
  '/notifications': typeof ProtectedNotificationsLazyRoute
  '/search': typeof ProtectedSearchLazyRoute
  '/banned': typeof PublicBannedLazyRoute
  '/not-exist': typeof PublicNotExistLazyRoute
  '/not-online': typeof PublicNotOnlineLazyRoute
  '/auth': typeof AuthIndexRoute
  '/category/$id': typeof ProtectedCategoryIdRoute
  '/dashboard': typeof ProtectedDashboardDashboardIndexRoute
  '/lands/$id': typeof ProtectedLandsIdRoute
  '/thread/$id': typeof ProtectedThreadIdRoute
  '/user/$nickname': typeof ProtectedUserNicknameRoute
  '/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/create-ticket': typeof ProtectedactionsCreateTicketLazyRoute
  '/lands': typeof ProtectedLandsIndexRoute
  '/ratings': typeof ProtectedRatingsIndexLazyRoute
  '/dashboard/profile': typeof ProtectedDashboardDashboardProfileRoute
  '/dashboard/threads': typeof ProtectedDashboardDashboardThreadsRoute
  '/admin/configs': typeof ProtectedAdminAdminConfigsLazyRoute
  '/admin/dashboard': typeof ProtectedAdminAdminDashboardLazyRoute
  '/admin/stats': typeof ProtectedAdminAdminStatsLazyRoute
  '/admin/support': typeof ProtectedAdminAdminSupportLazyRoute
  '/admin': typeof ProtectedAdminAdminIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/collection': typeof ProtectedCollectionRoute
  '/_protected/_admin': typeof ProtectedAdminLazyRouteWithChildren
  '/_protected/events': typeof ProtectedEventsLazyRoute
  '/_protected/friends': typeof ProtectedFriendsLazyRoute
  '/_protected/notifications': typeof ProtectedNotificationsLazyRoute
  '/_protected/search': typeof ProtectedSearchLazyRoute
  '/_public/banned': typeof PublicBannedLazyRoute
  '/_public/not-exist': typeof PublicNotExistLazyRoute
  '/_public/not-online': typeof PublicNotOnlineLazyRoute
  '/auth/': typeof AuthIndexRoute
  '/_protected/category/$id': typeof ProtectedCategoryIdRoute
  '/_protected/dashboard': typeof ProtectedDashboardRouteWithChildren
  '/_protected/dashboard/_dashboard': typeof ProtectedDashboardDashboardRouteWithChildren
  '/_protected/lands/$id': typeof ProtectedLandsIdRoute
  '/_protected/thread/$id': typeof ProtectedThreadIdRoute
  '/_protected/user/$nickname': typeof ProtectedUserNicknameRoute
  '/_protected/(actions)/create-thread': typeof ProtectedactionsCreateThreadLazyRoute
  '/_protected/(actions)/create-ticket': typeof ProtectedactionsCreateTicketLazyRoute
  '/_protected/lands/': typeof ProtectedLandsIndexRoute
  '/_protected/ratings/': typeof ProtectedRatingsIndexLazyRoute
  '/_protected/dashboard/_dashboard/profile': typeof ProtectedDashboardDashboardProfileRoute
  '/_protected/dashboard/_dashboard/threads': typeof ProtectedDashboardDashboardThreadsRoute
  '/_protected/_admin/admin/configs': typeof ProtectedAdminAdminConfigsLazyRoute
  '/_protected/_admin/admin/dashboard': typeof ProtectedAdminAdminDashboardLazyRoute
  '/_protected/_admin/admin/stats': typeof ProtectedAdminAdminStatsLazyRoute
  '/_protected/_admin/admin/support': typeof ProtectedAdminAdminSupportLazyRoute
  '/_protected/dashboard/_dashboard/': typeof ProtectedDashboardDashboardIndexRoute
  '/_protected/_admin/admin/': typeof ProtectedAdminAdminIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/collection'
    | '/events'
    | '/friends'
    | '/notifications'
    | '/search'
    | '/banned'
    | '/not-exist'
    | '/not-online'
    | '/auth'
    | '/category/$id'
    | '/dashboard'
    | '/lands/$id'
    | '/thread/$id'
    | '/user/$nickname'
    | '/create-thread'
    | '/create-ticket'
    | '/lands'
    | '/ratings'
    | '/dashboard/profile'
    | '/dashboard/threads'
    | '/admin/configs'
    | '/admin/dashboard'
    | '/admin/stats'
    | '/admin/support'
    | '/dashboard/'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/collection'
    | '/events'
    | '/friends'
    | '/notifications'
    | '/search'
    | '/banned'
    | '/not-exist'
    | '/not-online'
    | '/auth'
    | '/category/$id'
    | '/dashboard'
    | '/lands/$id'
    | '/thread/$id'
    | '/user/$nickname'
    | '/create-thread'
    | '/create-ticket'
    | '/lands'
    | '/ratings'
    | '/dashboard/profile'
    | '/dashboard/threads'
    | '/admin/configs'
    | '/admin/dashboard'
    | '/admin/stats'
    | '/admin/support'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_protected/collection'
    | '/_protected/_admin'
    | '/_protected/events'
    | '/_protected/friends'
    | '/_protected/notifications'
    | '/_protected/search'
    | '/_public/banned'
    | '/_public/not-exist'
    | '/_public/not-online'
    | '/auth/'
    | '/_protected/category/$id'
    | '/_protected/dashboard'
    | '/_protected/dashboard/_dashboard'
    | '/_protected/lands/$id'
    | '/_protected/thread/$id'
    | '/_protected/user/$nickname'
    | '/_protected/(actions)/create-thread'
    | '/_protected/(actions)/create-ticket'
    | '/_protected/lands/'
    | '/_protected/ratings/'
    | '/_protected/dashboard/_dashboard/profile'
    | '/_protected/dashboard/_dashboard/threads'
    | '/_protected/_admin/admin/configs'
    | '/_protected/_admin/admin/dashboard'
    | '/_protected/_admin/admin/stats'
    | '/_protected/_admin/admin/support'
    | '/_protected/dashboard/_dashboard/'
    | '/_protected/_admin/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/_public",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/collection",
        "/_protected/_admin",
        "/_protected/events",
        "/_protected/friends",
        "/_protected/notifications",
        "/_protected/search",
        "/_protected/category/$id",
        "/_protected/dashboard",
        "/_protected/lands/$id",
        "/_protected/thread/$id",
        "/_protected/user/$nickname",
        "/_protected/(actions)/create-thread",
        "/_protected/(actions)/create-ticket",
        "/_protected/lands/",
        "/_protected/ratings/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/banned",
        "/_public/not-exist",
        "/_public/not-online"
      ]
    },
    "/_protected/collection": {
      "filePath": "_protected/collection.tsx",
      "parent": "/_protected"
    },
    "/_protected/_admin": {
      "filePath": "_protected/_admin.lazy.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/_admin/admin/configs",
        "/_protected/_admin/admin/dashboard",
        "/_protected/_admin/admin/stats",
        "/_protected/_admin/admin/support",
        "/_protected/_admin/admin/"
      ]
    },
    "/_protected/events": {
      "filePath": "_protected/events.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/friends": {
      "filePath": "_protected/friends.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/notifications": {
      "filePath": "_protected/notifications.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/search": {
      "filePath": "_protected/search.lazy.tsx",
      "parent": "/_protected"
    },
    "/_public/banned": {
      "filePath": "_public/banned.lazy.tsx",
      "parent": "/_public"
    },
    "/_public/not-exist": {
      "filePath": "_public/not-exist.lazy.tsx",
      "parent": "/_public"
    },
    "/_public/not-online": {
      "filePath": "_public/not-online.lazy.tsx",
      "parent": "/_public"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/_protected/category/$id": {
      "filePath": "_protected/category/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard",
      "parent": "/_protected",
      "children": [
        "/_protected/dashboard/_dashboard"
      ]
    },
    "/_protected/dashboard/_dashboard": {
      "filePath": "_protected/dashboard/_dashboard.tsx",
      "parent": "/_protected/dashboard",
      "children": [
        "/_protected/dashboard/_dashboard/profile",
        "/_protected/dashboard/_dashboard/threads",
        "/_protected/dashboard/_dashboard/"
      ]
    },
    "/_protected/lands/$id": {
      "filePath": "_protected/lands/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/thread/$id": {
      "filePath": "_protected/thread/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/user/$nickname": {
      "filePath": "_protected/user/$nickname.tsx",
      "parent": "/_protected"
    },
    "/_protected/(actions)/create-thread": {
      "filePath": "_protected/(actions)/create-thread.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/(actions)/create-ticket": {
      "filePath": "_protected/(actions)/create-ticket.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/lands/": {
      "filePath": "_protected/lands/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/ratings/": {
      "filePath": "_protected/ratings/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard/_dashboard/profile": {
      "filePath": "_protected/dashboard/_dashboard/profile.tsx",
      "parent": "/_protected/dashboard/_dashboard"
    },
    "/_protected/dashboard/_dashboard/threads": {
      "filePath": "_protected/dashboard/_dashboard/threads.tsx",
      "parent": "/_protected/dashboard/_dashboard"
    },
    "/_protected/_admin/admin/configs": {
      "filePath": "_protected/_admin/admin/configs.lazy.tsx",
      "parent": "/_protected/_admin"
    },
    "/_protected/_admin/admin/dashboard": {
      "filePath": "_protected/_admin/admin/dashboard.lazy.tsx",
      "parent": "/_protected/_admin"
    },
    "/_protected/_admin/admin/stats": {
      "filePath": "_protected/_admin/admin/stats.lazy.tsx",
      "parent": "/_protected/_admin"
    },
    "/_protected/_admin/admin/support": {
      "filePath": "_protected/_admin/admin/support.lazy.tsx",
      "parent": "/_protected/_admin"
    },
    "/_protected/dashboard/_dashboard/": {
      "filePath": "_protected/dashboard/_dashboard/index.tsx",
      "parent": "/_protected/dashboard/_dashboard"
    },
    "/_protected/_admin/admin/": {
      "filePath": "_protected/_admin/admin/index.lazy.tsx",
      "parent": "/_protected/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
