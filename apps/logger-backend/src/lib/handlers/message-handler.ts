import { adminHandler } from "./admin-handler.ts"
import { Bot, type DeriveDefinitions, type MessageContext } from "gramio"
import { controlHandler } from "./control-handler.ts"
import { sendAdminsList } from "./main-handler.ts"
import { stateToKeyboard } from "../../shared/bot/keyboards.ts"
import { tempAdmins, userStates } from "../../shared/maps/maps.ts"
import { validateRequest } from "../../utils/validate-request.js"

export const restrictedCommands = [
  "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
  "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
  "–ù–∞–∑–∞–¥",
  "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
  "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
]

export type Context = MessageContext<Bot<{}, DeriveDefinitions>>

export function messageHandler(bot: Bot) {
  bot.on("message", handler);
}

export const handler = async (ctx: Context, next: () => void) => {
  if (!ctx.text || !ctx.from) return;

  const userId = ctx.from.id
  const isCommand = ctx.text.startsWith("/");
  const commandText = isCommand ? ctx.text.slice(1) : ctx.text;

  console.log(`${ctx.from.id} - ${ctx.text} | ${ctx.chat.id}`)

  if (ctx.text.includes("–∞–±–æ–±–∞")) {
    ctx.setReaction("ü§°");
    return ctx.reply("–¢—ã –∞–±–æ–±–∞?");
  }

  if (isCommand && restrictedCommands.includes(commandText)) {
    const isAdmin = await validateRequest(userId);

    if (!isAdmin) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    next();
  }

  if (commandText === "–ù–∞–∑–∞–¥") {
    userStates.delete(userId.toString());
    tempAdmins.delete(userId.toString());

    return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
      reply_markup: stateToKeyboard["main"]
    });
  }

  if (commandText === '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') {
    return controlHandler(ctx)
  }

  if (commandText === "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤") {
    return sendAdminsList(ctx);
  }

  if (commandText === '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞') {
    tempAdmins.set(userId.toString(), 'add');
    userStates.set(userId.toString(), 'control');
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  if (ctx.text === "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") {
    tempAdmins.set(userId.toString(), "remove");
    userStates.set(userId.toString(), 'control');
    return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
  }

  return adminHandler(ctx, userId.toString());
};