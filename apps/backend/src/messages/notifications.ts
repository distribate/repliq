import type { NotifyIssueReceived, NotifyLoginReceived, NotifyRegisterReceived } from "@repo/types/entities/notify-types";

const loginMessage = (payload: NotifyLoginReceived) => `–ö—Ç–æ-—Ç–æ –≤–æ—à–µ–ª –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. ${payload.browser ? payload.browser.slice(0, 64) : "Unknown"} 
  / ${payload.ip ? payload.ip.slice(0, 64) : "Unknown"}`

const registerMessage = (payload: NotifyRegisterReceived) => `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${payload.nickname}! –ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ üòè`

const issueMessage = (payload: NotifyIssueReceived) => {
  const slicedTitle = payload.title.length > 16
    ? payload.title.slice(0, 16) + "..."
    : payload.title;

  return `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ${slicedTitle} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞`
}

const voteMessage = `–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å! –ù–∞–≥—Ä–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ü§ñ`

export { loginMessage, registerMessage, issueMessage, voteMessage }